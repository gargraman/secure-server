# Security Hardening Configuration for AI-SOAR Platform
# Production security configurations and best practices

apiVersion: v1
kind: ConfigMap
metadata:
  name: security-hardening-config
  namespace: ai-soar-platform
data:
  # Security Headers Configuration
  security-headers.conf: |
    # OWASP Security Headers
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

    # Content Security Policy
    add_header Content-Security-Policy "
      default-src 'self';
      script-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;
      style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;
      font-src 'self' https://fonts.gstatic.com;
      img-src 'self' data: https:;
      connect-src 'self' wss: https:;
      frame-ancestors 'none';
      object-src 'none';
      base-uri 'self';
      form-action 'self';
      upgrade-insecure-requests;
    " always;

  # Rate Limiting Configuration
  rate-limiting.conf: |
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=health:10m rate=60r/m;
    limit_req_zone $binary_remote_addr zone=docs:10m rate=20r/m;
    limit_req_zone $binary_remote_addr zone=general:10m rate=200r/m;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn_zone $server_name zone=conn_limit_per_server:10m;

  # IP Filtering and Geo-blocking
  ip-filtering.conf: |
    # Allow specific IP ranges (configure for your environment)
    # allow 10.0.0.0/8;     # Private networks
    # allow 172.16.0.0/12;  # Private networks
    # allow 192.168.0.0/16; # Private networks

    # Block known malicious IP ranges
    deny 192.0.2.0/24;      # TEST-NET-1 (example block)

    # Geo-blocking configuration (requires GeoIP2 module)
    # map $geoip2_country_code $blocked_country {
    #     default 0;
    #     CN 1;  # Block China
    #     RU 1;  # Block Russia
    #     KP 1;  # Block North Korea
    # }

  # SSL/TLS Security Configuration
  ssl-security.conf: |
    # SSL/TLS Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_ecdh_curve secp384r1;

    # SSL Session Settings
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

  # Security Monitoring and Logging
  security-logging.conf: |
    # Enhanced logging format for security monitoring
    log_format security '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       '$request_time $upstream_response_time '
                       '"$http_x_forwarded_for" "$http_x_real_ip" '
                       '"$geoip2_country_code" "$ssl_protocol" "$ssl_cipher"';

    # Log suspicious activity
    map $status $suspicious {
        ~^4 1;  # 4xx errors
        ~^5 1;  # 5xx errors
        default 0;
    }

---
apiVersion: v1
kind: Secret
metadata:
  name: security-certificates
  namespace: ai-soar-platform
type: kubernetes.io/tls
data:
  # TLS certificate and key (base64 encoded)
  # Replace with actual certificates
  tls.crt: |
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...
  tls.key: |
    LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t...

---
# Network Policies for Kubernetes
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ai-soar-network-policy
  namespace: ai-soar-platform
spec:
  podSelector:
    matchLabels:
      app: ai-soar-platform
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: nginx
    ports:
    - protocol: TCP
      port: 8080
  - from: []  # Allow health checks from anywhere
    ports:
    - protocol: TCP
      port: 8080
      endPort: 8080
  egress:
  - to: []  # Allow all outbound (can be restricted further)
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 7687  # Neo4j
    - protocol: TCP
      port: 6379  # Redis
    - protocol: UDP
      port: 53   # DNS

---
# Pod Security Policy (if supported)
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: ai-soar-psp
  namespace: ai-soar-platform
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  readOnlyRootFilesystem: true
  allowedCapabilities: []
  defaultAllowPrivilegeEscalation: false
