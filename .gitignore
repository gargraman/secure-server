# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.env.*
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
myenv/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to use the provided template.
.idea/

# VS Code
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.code-workspace

# Local History for Visual Studio Code
.history/

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.stackdump
[Dd]esktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# Security & Credentials (CRITICAL for cybersecurity platform)
*.key
*.pem
*.p12
*.pfx
*.cer
*.crt
*.der
*.csr
credentials.json
service-account*.json
*_credentials.json
*-credentials.json
*secret*
*token*
*password*
*passwd*
*api_key*
*apikey*
*private*

# Configuration files with sensitive data
config/deployment/.env
config/deployment/*.env
config/secrets/
config/keys/
.secrets/
secrets/
*.secret
*.conf.local

# Application-specific
# XDR Poller logs and data
*.log
logs/
data/
alerts/
xdr_data/
xdr_alerts/
temp/
tmp/
cache/

# Neo4j database files (local instances)
neo4j/
graph.db/
*.db

# Docker
.dockerignore
docker-compose.override.yml

# Terraform
*.tfstate
*.tfstate.*
.terraform/
.terraform.lock.hcl

# Kubernetes
*.kubeconfig
kube-config

# Google Cloud
.gcloud/
gcloud_credentials.json

# AWS
.aws/
aws_credentials

# Azure
.azure/

# Backup files
*.bak
*.backup
*.old
*.orig
*.swp
*.swo
*~

# IDE and editor files
*.sublime-project
*.sublime-workspace
.project
.pydevproject

# OS generated files
.DS_Store?
Icon?
._*
.Spotlight-V100
.Trashes

# Network drives (Windows)
*.lnk

# Temporary files
*.tmp
*.temp

# Application specific ignore patterns
# MCP server data
mcp_data/
mcp_cache/

# Vertex AI cache
vertex_ai_cache/

# Local development overrides
local_settings.py
local_config.py
dev_config.py

# SSL Certificates
*.crt
*.key
*.pem
*.p12
*.pfx

# Database dumps
*.sql
*.dump

# Archive files
*.zip
*.tar.gz
*.rar
*.7z

# Large files that shouldn't be in Git
*.iso
*.dmg
*.img

# Development artifacts
.coverage.*
.pytest_cache/
.mypy_cache/
.bandit
.security

# Dependencies lock files (comment out if you want to track them)
# package-lock.json
# yarn.lock
# Pipfile.lock

# Application logs
xdr_poller.log
app.log
debug.log
error.log
access.log

# Jupyter notebooks checkpoints
.ipynb_checkpoints/

# Local development database
local.db
test.db
dev.db

# Cloud deployment artifacts
deployment/*.env
deployment/secrets/
deployment/keys/

# Monitoring and metrics
metrics/
monitoring/
traces/

# Local documentation builds
docs/build/
docs/_build/