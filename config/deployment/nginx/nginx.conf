user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=health:10m rate=30r/s;
    limit_req_zone $binary_remote_addr zone=docs:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=20r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # Individual MCP server upstreams for better load balancing
    upstream virustotal_servers {
        least_conn;
        server mcp-servers:8001 max_fails=2 fail_timeout=30s weight=1;
        keepalive 32;
    }

    upstream servicenow_servers {
        least_conn;
        server mcp-servers:8002 max_fails=2 fail_timeout=30s weight=1;
        keepalive 32;
    }

    upstream cyberreason_servers {
        least_conn;
        server mcp-servers:8003 max_fails=2 fail_timeout=30s weight=1;
        keepalive 32;
    }

    upstream custom_rest_servers {
        least_conn;
        server mcp-servers:8004 max_fails=2 fail_timeout=30s weight=1;
        keepalive 32;
    }

    upstream cloud_ivx_servers {
        least_conn;
        server mcp-servers:8005 max_fails=2 fail_timeout=30s weight=1;
        keepalive 32;
    }

    # Web application upstream with health checks
    upstream web_app {
        least_conn;
        server web-app:8080 max_fails=2 fail_timeout=30s weight=1;
        keepalive 64;
    }

    # XDR poller upstream (if running separately)
    upstream xdr_poller {
        server xdr-poller:8090 max_fails=2 fail_timeout=30s;
    }

    # Health check endpoint
    server {
        listen 80;
        server_name localhost;

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Main server configuration
    server {
        listen 80;
        server_name _;

        # Connection limits
        limit_conn conn_limit_per_ip 20;

        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'" always;

        # Health check endpoints (high rate limit)
        location ~ ^/(health|api/health|readiness|liveness|startup|metrics) {
            limit_req zone=health burst=50 nodelay;
            proxy_pass http://web_app;
            include proxy_params;
            access_log off;  # Don't log health checks
        }

        # API documentation (lower rate limit)
        location ~ ^/(docs|redoc|openapi.json) {
            limit_req zone=docs burst=10 nodelay;
            proxy_pass http://web_app;
            include proxy_params;
        }

        # MCP Server API endpoints with individual upstreams
        location /api/virustotal/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://virustotal_servers/;
            include proxy_params;
        }

        location /api/servicenow/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://servicenow_servers/;
            include proxy_params;
        }

        location /api/cyberreason/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://cyberreason_servers/;
            include proxy_params;
        }

        location /api/custom/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://custom_rest_servers/;
            include proxy_params;
        }

        location /api/cloud-ivx/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://cloud_ivx_servers/;
            include proxy_params;
        }

        # XDR Poller API (if exposed)
        location /api/xdr-poller/ {
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://xdr_poller/;
            include proxy_params;
        }

        # Main API endpoints (web application)
        location /api/ {
            limit_req zone=api burst=30 nodelay;
            proxy_pass http://web_app;
            include proxy_params;

            # API-specific timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Static files with caching
        location /static/ {
            alias /var/www/html/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";

            # Enable CORS for static assets (needed for CDN and cross-origin requests)
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept" always;

            # Security headers for static files
            add_header X-Content-Type-Options nosniff always;
            add_header X-Frame-Options DENY always;

            # Specific handling for different file types
            location ~* \.(js|css)$ {
                expires 1w;
                add_header Cache-Control "public, must-revalidate, proxy-revalidate";
                add_header Content-Security-Policy "default-src 'self'" always;
            }

            location ~* \.(png|jpg|jpeg|gif|ico|svg|webp)$ {
                expires 1M;
                add_header Cache-Control "public, immutable";
            }

            # Fallback to web app for missing static files
            try_files $uri @fallback_to_app;
        }

        location @fallback_to_app {
            proxy_pass http://web_app;
            include proxy_params;
        }

        # WebSocket support for real-time features
        location /ws/ {
            limit_req zone=general burst=10 nodelay;
            proxy_pass http://web_app;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 300s;  # Longer timeout for persistent connections
        }

        # Main web application (dashboard, config pages)
        location / {
            limit_req zone=general burst=30 nodelay;
            proxy_pass http://web_app;
            include proxy_params;

            # Web app timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Buffering settings
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
        }

        # Block access to sensitive files
        location ~ /\.(env|git|svn) {
            deny all;
            return 404;
        }

        location ~ \.(sql|log|bak)$ {
            deny all;
            return 404;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 429 /429.html;  # Rate limit exceeded
        error_page 500 502 503 504 /50x.html;

        location = /404.html {
            root /var/www/html;
            internal;
        }

        location = /429.html {
            root /var/www/html;
            internal;
        }

        location = /50x.html {
            root /var/www/html;
            internal;
        }
    }

    # HTTPS server (if SSL certificates are available)
    # server {
    #     listen 443 ssl http2;
    #     server_name _;
    #
    #     ssl_certificate /etc/nginx/ssl/server.crt;
    #     ssl_certificate_key /etc/nginx/ssl/server.key;
    #     ssl_session_cache shared:SSL:1m;
    #     ssl_session_timeout 5m;
    #     ssl_ciphers HIGH:!aNULL:!MD5;
    #     ssl_prefer_server_ciphers on;
    #
    #     # Same location blocks as HTTP server
    # }
}
