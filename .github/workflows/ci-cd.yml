name: AI-SOAR Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: svc-hackathon-prod07
  GAR_LOCATION: us-central1
  SERVICE: ai-soar-platform
  REGION: us-central1

jobs:
  # Code Quality and Testing
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    services:
      neo4j:
        image: neo4j:5.15-community
        env:
          NEO4J_AUTH: neo4j/test123
          NEO4J_PLUGINS: '["apoc"]'
        ports:
          - 7687:7687
        options: >-
          --health-cmd "cypher-shell -u neo4j -p test123 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov black isort flake8 safety bandit

    - name: Code formatting check
      run: |
        black --check src/
        isort --check-only src/

    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Security scan with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ --severity-level medium

    - name: Dependency security scan
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Set up test environment
      run: |
        export NEO4J_URI=neo4j://localhost:7687
        export NEO4J_USERNAME=neo4j
        export NEO4J_PASSWORD=test123
        export REDIS_URL=redis://localhost:6379
        export ENVIRONMENT=test
        export VERTEX_AI_ENABLED=false

    - name: Initialize Neo4j database
      run: |
        export NEO4J_URI=neo4j://localhost:7687
        export NEO4J_USERNAME=neo4j
        export NEO4J_PASSWORD=test123
        python -m src.database.neo4j_setup

    - name: Run tests
      run: |
        export NEO4J_URI=neo4j://localhost:7687
        export NEO4J_USERNAME=neo4j
        export NEO4J_PASSWORD=test123
        export REDIS_URL=redis://localhost:6379
        export ENVIRONMENT=test
        export VERTEX_AI_ENABLED=false
        pytest src/ --cov=src --cov-report=xml --cov-report=html -v

    - name: Upload coverage to Codecov
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-reports
        path: |
          coverage.xml
          htmlcov/
          bandit-report.json
          safety-report.json

  # Docker Build and Security Scan
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Google Container Registry
      uses: docker/login-action@v3
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ secrets.GCP_SA_KEY }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Staging (develop branch)
  deploy-staging:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://ai-soar-platform-staging-${{ env.PROJECT_ID }}.a.run.app

    steps:
    - uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Deploy to Cloud Run (Staging)
      run: |
        gcloud run deploy ai-soar-platform-staging \
          --image gcr.io/$PROJECT_ID/$SERVICE:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --memory 4Gi \
          --cpu 2 \
          --max-instances 3 \
          --min-instances 1 \
          --port 8080 \
          --timeout 300s \
          --service-account aisoar-service-account@$PROJECT_ID.iam.gserviceaccount.com \
          --vpc-connector aisoar-vpc-connector \
          --vpc-egress private-ranges-only \
          --set-env-vars ENVIRONMENT=staging,GOOGLE_CLOUD_PROJECT=$PROJECT_ID,VERTEX_AI_ENABLED=true

    - name: Run integration tests against staging
      run: |
        # Wait for deployment to be ready
        sleep 30

        # Get service URL
        SERVICE_URL=$(gcloud run services describe ai-soar-platform-staging --region=$REGION --format="value(status.url)")

        # Run health checks
        curl -f "$SERVICE_URL/health" || exit 1
        curl -f "$SERVICE_URL/api/health/detailed" || exit 1

  # Deploy to Production (main branch)
  deploy-production:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://ai-soar-platform-${{ env.PROJECT_ID }}.a.run.app

    steps:
    - uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Deploy to Cloud Run (Production)
      run: |
        gcloud run deploy $SERVICE \
          --image gcr.io/$PROJECT_ID/$SERVICE:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --memory 4Gi \
          --cpu 2 \
          --max-instances 10 \
          --min-instances 1 \
          --port 8080 \
          --timeout 300s \
          --service-account aisoar-service-account@$PROJECT_ID.iam.gserviceaccount.com \
          --vpc-connector aisoar-vpc-connector \
          --vpc-egress private-ranges-only \
          --set-env-vars ENVIRONMENT=production,GOOGLE_CLOUD_PROJECT=$PROJECT_ID,VERTEX_AI_ENABLED=true

    - name: Gradual traffic rollout
      run: |
        # Deploy with 10% traffic first
        gcloud run services update-traffic $SERVICE \
          --to-latest=10 \
          --region $REGION

        # Wait and monitor
        sleep 60

        # Get service URL and test
        SERVICE_URL=$(gcloud run services describe $SERVICE --region=$REGION --format="value(status.url)")
        curl -f "$SERVICE_URL/health" || exit 1

        # If healthy, route 100% traffic
        gcloud run services update-traffic $SERVICE \
          --to-latest=100 \
          --region $REGION

    - name: Run post-deployment verification
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE --region=$REGION --format="value(status.url)")

        # Test critical endpoints
        curl -f "$SERVICE_URL/health" || exit 1
        curl -f "$SERVICE_URL/api/health/detailed" || exit 1
        curl -f "$SERVICE_URL/meta" || exit 1

        # Verify Neo4j connectivity
        curl -f "$SERVICE_URL/api/health/neo4j" || exit 1

        echo "Production deployment successful!"

    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ AI-SOAR Platform successfully deployed to production"
        echo "üåê URL: https://ai-soar-platform-$PROJECT_ID.a.run.app"
        echo "üìä Commit: $GITHUB_SHA"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå AI-SOAR Platform deployment to production failed"
        echo "üîç Check logs and rollback if necessary"
        exit 1
